package main

import (
	"bytes"
	"flag"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"os"
	"regexp"
)

var (
	intTypes = []string{
		`int`, `int8`, `int16`, `int32`, `int64`,
		`uint`, `uint8`, `uint16`, `uint32`, `uint64`,
		`byte`,
	}

	commonTypes = []string{
		`float32`, `float64`,
	}

	genHeader = []byte(`package gomath
// Code generated by go generate; DO NOT EDIT
`)

	camelingRegex = regexp.MustCompile(`[0-9A-Za-z]+`)
)

var (
	argv struct {
		tmplIntFile    string
		tmplCommonFile string
		outFile        string
	}
)

type (
	_TYPE_     int
	_TYPENAME_ int
)

func init() {
	flag.StringVar(&argv.tmplIntFile, `tmpl_int`, `/dev/stdin`, `Input template file (for int types)`)
	flag.StringVar(&argv.tmplCommonFile, `tmpl_common`, `/dev/stdin`, `Input template file (for all types)`)
	flag.StringVar(&argv.outFile, `o`, `/dev/stdout`, `Output generated code file`)
}

func main() {
	log.SetPrefix(`math_gen: `)
	log.SetFlags(log.Lmicroseconds | log.Ldate | log.Lshortfile)

	flag.Parse()
	if len(argv.tmplIntFile) == 0 || len(argv.tmplCommonFile) == 0 || len(argv.outFile) == 0 {
		flag.Usage()
		os.Exit(1)
	}

	tmplInt, err := ioutil.ReadFile(argv.tmplIntFile)
	if err != nil {
		log.Fatalln(`Cannot read from input file: ` + err.Error())
	}
	tmplInt = tmplInt[len("package main\n"):]

	tmplCommon, err := ioutil.ReadFile(argv.tmplCommonFile)
	if err != nil {
		log.Fatalln(`Cannot read from input file: ` + err.Error())
	}
	tmplCommon = tmplCommon[len("package main\n"):]

	outFile, err := os.Create(argv.outFile)
	if err != nil {
		log.Fatalln(`Cannot create output file: ` + err.Error())
	}
	defer outFile.Close()

	var buf bytes.Buffer

	buf.Write(genHeader)

	for _, type_ := range intTypes {
		genForType(tmplCommon, []byte(type_), &buf)
		genForType(tmplInt, []byte(type_), &buf)
	}

	for _, type_ := range commonTypes {
		genForType(tmplCommon, []byte(type_), &buf)
	}

	if buf, err := format.Source(buf.Bytes()); err != nil {
		log.Fatalln(`Cannot format code: ` + err.Error())
	} else if _, err := outFile.Write(buf); err != nil {
		log.Fatalln(`Cannot write to output file: ` + err.Error())
	}
}

func genForType(tmpl []byte, type_ []byte, wr io.Writer) {
	typeInName := camelCase(type_)

	tmpl = bytes.Replace(tmpl, []byte(`_TYPENAME_`), typeInName, -1)
	tmpl = bytes.Replace(tmpl, []byte(`_TYPE_`), type_, -1)
	wr.Write(tmpl)
}

func camelCase(src []byte) []byte {
	chunks := camelingRegex.FindAll(bytes.ToLower(src), -1)
	for idx := range chunks {
		chunks[idx] = bytes.Title(chunks[idx])
	}
	return bytes.Join(chunks, nil)
}
